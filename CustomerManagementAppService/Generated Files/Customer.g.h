// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#include "winrt/CustomerManagementAppService.h"
namespace winrt::CustomerManagementAppService::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) Customer_base : implements<D, CustomerManagementAppService::Customer, I...>
    {
        using base_type = Customer_base;
        using class_type = CustomerManagementAppService::Customer;
        using implements_type = typename Customer_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"CustomerManagementAppService.Customer";
        }
    };
}
namespace winrt::CustomerManagementAppService::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) CustomerT : implements<D, winrt::Windows::Foundation::IActivationFactory, winrt::CustomerManagementAppService::ICustomerFactory, I...>
    {
        using instance_type = CustomerManagementAppService::Customer;

        hstring GetRuntimeClassName() const
        {
            return L"CustomerManagementAppService.Customer";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
        auto CreateInstance(hstring const& email, hstring const& mobile, hstring const& fullname)
        {
            return make<T>(email, mobile, fullname);
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CUSTOMER_XAML_G_H) || __has_include("Customer.xaml.g.h")
#include "Customer.xaml.g.h"
#else

namespace winrt::CustomerManagementAppService::implementation
{
    template <typename D, typename... I>
    using CustomerT = Customer_base<D, I...>;
}

#endif
