// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#include "winrt/CustomerManagementAppService.h"
namespace winrt::CustomerManagementAppService::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) Company_base : implements<D, CustomerManagementAppService::Company, I...>
    {
        using base_type = Company_base;
        using class_type = CustomerManagementAppService::Company;
        using implements_type = typename Company_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"CustomerManagementAppService.Company";
        }
    };
}
namespace winrt::CustomerManagementAppService::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) CompanyT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = CustomerManagementAppService::Company;

        hstring GetRuntimeClassName() const
        {
            return L"CustomerManagementAppService.Company";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_COMPANY_XAML_G_H) || __has_include("Company.xaml.g.h")
#include "Company.xaml.g.h"
#else

namespace winrt::CustomerManagementAppService::implementation
{
    template <typename D, typename... I>
    using CompanyT = Company_base<D, I...>;
}

#endif
