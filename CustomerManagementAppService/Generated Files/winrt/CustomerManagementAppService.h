// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#ifndef WINRT_CustomerManagementAppService_H
#define WINRT_CustomerManagementAppService_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.211028.7"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.211028.7"
#include "winrt/impl/CustomerManagementAppService.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(bool) consume_CustomerManagementAppService_ICompany<D>::AddCompany(param::hstring const& companyName, param::hstring const& companyLocation) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::ICompany)->AddCompany(*(void**)(&companyName), *(void**)(&companyLocation), &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_ICustomer<D>::AddCustomer(winrt::CustomerManagementAppService::Customer const& customer) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::ICustomer)->AddCustomer(*(void**)(&customer)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::Customer) consume_CustomerManagementAppService_ICustomerFactory<D>::CreateInstance(param::hstring const& email, param::hstring const& mobile, param::hstring const& fullname) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::ICustomerFactory)->CreateInstance(*(void**)(&email), *(void**)(&mobile), *(void**)(&fullname), &value));
        return winrt::CustomerManagementAppService::Customer{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_CustomerManagementAppService_IUser<D>::Authenticate(param::hstring const& username, param::hstring const& password, int64_t companyID, winrt::CustomerManagementAppService::User const& userInfo) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->Authenticate(*(void**)(&username), *(void**)(&password), companyID, *(void**)(&userInfo), &result));
        return result;
    }
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::ICompany> : produce_base<D, winrt::CustomerManagementAppService::ICompany>
    {
        int32_t __stdcall AddCompany(void* companyName, void* companyLocation, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().AddCompany(*reinterpret_cast<hstring const*>(&companyName), *reinterpret_cast<hstring const*>(&companyLocation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::ICustomer> : produce_base<D, winrt::CustomerManagementAppService::ICustomer>
    {
        int32_t __stdcall AddCustomer(void* customer) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddCustomer(*reinterpret_cast<winrt::CustomerManagementAppService::Customer const*>(&customer));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::ICustomerFactory> : produce_base<D, winrt::CustomerManagementAppService::ICustomerFactory>
    {
        int32_t __stdcall CreateInstance(void* email, void* mobile, void* fullname, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::CustomerManagementAppService::Customer>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&email), *reinterpret_cast<hstring const*>(&mobile), *reinterpret_cast<hstring const*>(&fullname)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::IUser> : produce_base<D, winrt::CustomerManagementAppService::IUser>
    {
        int32_t __stdcall Authenticate(void* username, void* password, int64_t companyID, void* userInfo, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().Authenticate(*reinterpret_cast<hstring const*>(&username), *reinterpret_cast<hstring const*>(&password), companyID, *reinterpret_cast<winrt::CustomerManagementAppService::User const*>(&userInfo)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::CustomerManagementAppService
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::CustomerManagementAppService::ICompany> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::ICustomer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::ICustomerFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::IUser> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::Company> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::Customer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::User> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
