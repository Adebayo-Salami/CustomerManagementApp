// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#ifndef WINRT_CustomerManagementAppService_H
#define WINRT_CustomerManagementAppService_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.211028.7"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.211028.7"
#include "winrt/impl/CustomerManagementAppService.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(bool) consume_CustomerManagementAppService_IAuthUserResultVM<D>::IsSuccessful() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IAuthUserResultVM)->get_IsSuccessful(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IAuthUserResultVM<D>::IsSuccessful(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IAuthUserResultVM)->put_IsSuccessful(value));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_CustomerManagementAppService_IAuthUserResultVM<D>::Message() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IAuthUserResultVM)->get_Message(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IAuthUserResultVM<D>::Message(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IAuthUserResultVM)->put_Message(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::User) consume_CustomerManagementAppService_IAuthUserResultVM<D>::UserInfo() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IAuthUserResultVM)->get_UserInfo(&value));
        return winrt::CustomerManagementAppService::User{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IAuthUserResultVM<D>::UserInfo(winrt::CustomerManagementAppService::User const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IAuthUserResultVM)->put_UserInfo(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(int64_t) consume_CustomerManagementAppService_IUser<D>::GetId() const
    {
        int64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->get_GetId(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_CustomerManagementAppService_IUser<D>::GetUsername() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->get_GetUsername(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_CustomerManagementAppService_IUser<D>::GetPassword() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->get_GetPassword(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_CustomerManagementAppService_IUser<D>::GetCompany() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->get_GetCompany(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IUser<D>::SetId(int64_t id) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->SetId(id));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IUser<D>::SetUsername(param::hstring const& username) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->SetUsername(*(void**)(&username)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IUser<D>::SetPassword(param::hstring const& password) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->SetPassword(*(void**)(&password)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_CustomerManagementAppService_IUser<D>::SetCompany(param::hstring const& company) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUser)->SetCompany(*(void**)(&company)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::User) consume_CustomerManagementAppService_IUserFactory<D>::CreateInstance(int32_t id, param::hstring const& username, param::hstring const& password, param::hstring const& company) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUserFactory)->CreateInstance(id, *(void**)(&username), *(void**)(&password), *(void**)(&company), &value));
        return winrt::CustomerManagementAppService::User{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::AuthUserResultVM) consume_CustomerManagementAppService_IUserService<D>::GetUserByID(int32_t Id) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUserService)->GetUserByID(Id, &result));
        return winrt::CustomerManagementAppService::AuthUserResultVM{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::AuthUserResultVM) consume_CustomerManagementAppService_IUserService<D>::AuthenticateUser(param::hstring const& username, param::hstring const& password, param::hstring const& company) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUserService)->AuthenticateUser(*(void**)(&username), *(void**)(&password), *(void**)(&company), &result));
        return winrt::CustomerManagementAppService::AuthUserResultVM{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::AuthUserResultVM) consume_CustomerManagementAppService_IUserService<D>::CreateUser(param::hstring const& username, param::hstring const& password, param::hstring const& company) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::CustomerManagementAppService::IUserService)->CreateUser(*(void**)(&username), *(void**)(&password), *(void**)(&company), &result));
        return winrt::CustomerManagementAppService::AuthUserResultVM{ result, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::IAuthUserResultVM> : produce_base<D, winrt::CustomerManagementAppService::IAuthUserResultVM>
    {
        int32_t __stdcall get_IsSuccessful(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSuccessful());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsSuccessful(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSuccessful(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Message(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Message(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_UserInfo(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::CustomerManagementAppService::User>(this->shim().UserInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_UserInfo(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UserInfo(*reinterpret_cast<winrt::CustomerManagementAppService::User const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::IUser> : produce_base<D, winrt::CustomerManagementAppService::IUser>
    {
        int32_t __stdcall get_GetId(int64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int64_t>(this->shim().GetId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GetUsername(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GetUsername());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GetPassword(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GetPassword());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GetCompany(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GetCompany());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetId(int64_t id) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetId(id);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetUsername(void* username) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetUsername(*reinterpret_cast<hstring const*>(&username));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetPassword(void* password) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPassword(*reinterpret_cast<hstring const*>(&password));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetCompany(void* company) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetCompany(*reinterpret_cast<hstring const*>(&company));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::IUserFactory> : produce_base<D, winrt::CustomerManagementAppService::IUserFactory>
    {
        int32_t __stdcall CreateInstance(int32_t id, void* username, void* password, void* company, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::CustomerManagementAppService::User>(this->shim().CreateInstance(id, *reinterpret_cast<hstring const*>(&username), *reinterpret_cast<hstring const*>(&password), *reinterpret_cast<hstring const*>(&company)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::CustomerManagementAppService::IUserService> : produce_base<D, winrt::CustomerManagementAppService::IUserService>
    {
        int32_t __stdcall GetUserByID(int32_t Id, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::CustomerManagementAppService::AuthUserResultVM>(this->shim().GetUserByID(Id));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AuthenticateUser(void* username, void* password, void* company, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::CustomerManagementAppService::AuthUserResultVM>(this->shim().AuthenticateUser(*reinterpret_cast<hstring const*>(&username), *reinterpret_cast<hstring const*>(&password), *reinterpret_cast<hstring const*>(&company)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateUser(void* username, void* password, void* company, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::CustomerManagementAppService::AuthUserResultVM>(this->shim().CreateUser(*reinterpret_cast<hstring const*>(&username), *reinterpret_cast<hstring const*>(&password), *reinterpret_cast<hstring const*>(&company)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::CustomerManagementAppService
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::CustomerManagementAppService::IAuthUserResultVM> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::IUser> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::IUserFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::IUserService> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::AuthUserResultVM> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::User> : winrt::impl::hash_base {};
    template<> struct hash<winrt::CustomerManagementAppService::UserService> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
