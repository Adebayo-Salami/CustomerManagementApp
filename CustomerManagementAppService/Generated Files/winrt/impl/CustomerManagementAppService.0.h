// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#ifndef WINRT_CustomerManagementAppService_0_H
#define WINRT_CustomerManagementAppService_0_H
WINRT_EXPORT namespace winrt::CustomerManagementAppService
{
    struct IAuthUserResultVM;
    struct IUser;
    struct IUserFactory;
    struct IUserService;
    struct AuthUserResultVM;
    struct User;
    struct UserService;
}
namespace winrt::impl
{
    template <> struct category<winrt::CustomerManagementAppService::IAuthUserResultVM>{ using type = interface_category; };
    template <> struct category<winrt::CustomerManagementAppService::IUser>{ using type = interface_category; };
    template <> struct category<winrt::CustomerManagementAppService::IUserFactory>{ using type = interface_category; };
    template <> struct category<winrt::CustomerManagementAppService::IUserService>{ using type = interface_category; };
    template <> struct category<winrt::CustomerManagementAppService::AuthUserResultVM>{ using type = class_category; };
    template <> struct category<winrt::CustomerManagementAppService::User>{ using type = class_category; };
    template <> struct category<winrt::CustomerManagementAppService::UserService>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::AuthUserResultVM> = L"CustomerManagementAppService.AuthUserResultVM";
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::User> = L"CustomerManagementAppService.User";
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::UserService> = L"CustomerManagementAppService.UserService";
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::IAuthUserResultVM> = L"CustomerManagementAppService.IAuthUserResultVM";
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::IUser> = L"CustomerManagementAppService.IUser";
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::IUserFactory> = L"CustomerManagementAppService.IUserFactory";
    template <> inline constexpr auto& name_v<winrt::CustomerManagementAppService::IUserService> = L"CustomerManagementAppService.IUserService";
    template <> inline constexpr guid guid_v<winrt::CustomerManagementAppService::IAuthUserResultVM>{ 0x7E6BFD78,0x6255,0x5F24,{ 0xAC,0x3F,0x57,0x2D,0x2A,0x30,0x56,0x63 } }; // 7E6BFD78-6255-5F24-AC3F-572D2A305663
    template <> inline constexpr guid guid_v<winrt::CustomerManagementAppService::IUser>{ 0xCC337313,0xE69D,0x59EA,{ 0xB5,0x4A,0xBC,0xD2,0xCE,0x33,0xF3,0x81 } }; // CC337313-E69D-59EA-B54A-BCD2CE33F381
    template <> inline constexpr guid guid_v<winrt::CustomerManagementAppService::IUserFactory>{ 0x3D548F87,0x3CAB,0x568A,{ 0x91,0xA8,0xB5,0x06,0xA0,0x4F,0xDB,0x7E } }; // 3D548F87-3CAB-568A-91A8-B506A04FDB7E
    template <> inline constexpr guid guid_v<winrt::CustomerManagementAppService::IUserService>{ 0x6D0E037F,0x7ABF,0x5E9C,{ 0x8A,0x6C,0xCF,0x15,0x47,0x28,0xA9,0x5E } }; // 6D0E037F-7ABF-5E9C-8A6C-CF154728A95E
    template <> struct default_interface<winrt::CustomerManagementAppService::AuthUserResultVM>{ using type = winrt::CustomerManagementAppService::IAuthUserResultVM; };
    template <> struct default_interface<winrt::CustomerManagementAppService::User>{ using type = winrt::CustomerManagementAppService::IUser; };
    template <> struct default_interface<winrt::CustomerManagementAppService::UserService>{ using type = winrt::CustomerManagementAppService::IUserService; };
    template <> struct abi<winrt::CustomerManagementAppService::IAuthUserResultVM>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSuccessful(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSuccessful(bool) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall put_Message(void*) noexcept = 0;
            virtual int32_t __stdcall get_UserInfo(void**) noexcept = 0;
            virtual int32_t __stdcall put_UserInfo(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::CustomerManagementAppService::IUser>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GetId(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_GetUsername(void**) noexcept = 0;
            virtual int32_t __stdcall get_GetPassword(void**) noexcept = 0;
            virtual int32_t __stdcall get_GetCompany(void**) noexcept = 0;
            virtual int32_t __stdcall SetId(int64_t) noexcept = 0;
            virtual int32_t __stdcall SetUsername(void*) noexcept = 0;
            virtual int32_t __stdcall SetPassword(void*) noexcept = 0;
            virtual int32_t __stdcall SetCompany(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::CustomerManagementAppService::IUserFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(int32_t, void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::CustomerManagementAppService::IUserService>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetUserByID(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall AuthenticateUser(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateUser(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_CustomerManagementAppService_IAuthUserResultVM
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSuccessful() const;
        WINRT_IMPL_AUTO(void) IsSuccessful(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
        WINRT_IMPL_AUTO(void) Message(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::User) UserInfo() const;
        WINRT_IMPL_AUTO(void) UserInfo(winrt::CustomerManagementAppService::User const& value) const;
    };
    template <> struct consume<winrt::CustomerManagementAppService::IAuthUserResultVM>
    {
        template <typename D> using type = consume_CustomerManagementAppService_IAuthUserResultVM<D>;
    };
    template <typename D>
    struct consume_CustomerManagementAppService_IUser
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int64_t) GetId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) GetUsername() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) GetPassword() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) GetCompany() const;
        WINRT_IMPL_AUTO(void) SetId(int64_t id) const;
        WINRT_IMPL_AUTO(void) SetUsername(param::hstring const& username) const;
        WINRT_IMPL_AUTO(void) SetPassword(param::hstring const& password) const;
        WINRT_IMPL_AUTO(void) SetCompany(param::hstring const& company) const;
    };
    template <> struct consume<winrt::CustomerManagementAppService::IUser>
    {
        template <typename D> using type = consume_CustomerManagementAppService_IUser<D>;
    };
    template <typename D>
    struct consume_CustomerManagementAppService_IUserFactory
    {
        WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::User) CreateInstance(int32_t id, param::hstring const& username, param::hstring const& password, param::hstring const& company) const;
    };
    template <> struct consume<winrt::CustomerManagementAppService::IUserFactory>
    {
        template <typename D> using type = consume_CustomerManagementAppService_IUserFactory<D>;
    };
    template <typename D>
    struct consume_CustomerManagementAppService_IUserService
    {
        WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::AuthUserResultVM) GetUserByID(int32_t Id) const;
        WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::AuthUserResultVM) AuthenticateUser(param::hstring const& username, param::hstring const& password, param::hstring const& company) const;
        WINRT_IMPL_AUTO(winrt::CustomerManagementAppService::AuthUserResultVM) CreateUser(param::hstring const& username, param::hstring const& password, param::hstring const& company) const;
    };
    template <> struct consume<winrt::CustomerManagementAppService::IUserService>
    {
        template <typename D> using type = consume_CustomerManagementAppService_IUserService<D>;
    };
}
#endif
